{"version":3,"sources":["Components/Titles.js","Components/Form.js","Components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","Form","props","onSubmit","loadWeather","type","name","placeholder","Weather","country","city","temperature","max","min","humidity","description","error","apiKey","App","state","undefined","getWeather","e","a","preventDefault","target","elements","value","fetch","api_call","json","response","console","log","setState","calcCelcius","main","temp","temp_max","temp_min","sys","weather","Math","floor","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4SAaeA,G,YAVA,WACX,OACI,6BACI,wBAAIC,UAAU,0BAAd,gBACA,uBAAGA,UAAU,6BAAb,+CCKGC,EAVF,SAACC,GACV,OACI,0BAAMC,SAAUD,EAAME,aAClB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9C,iDCuCGC,EA3CC,SAACN,GACb,OAEI,yBAAKF,UAAU,gBAEPE,EAAMO,SAAWP,EAAMQ,MAAQ,uBAAGV,UAAU,gBAAb,YAC3B,0BAAMA,UAAU,kBAAhB,KAAoCE,EAAMQ,KAA1C,KAAkDR,EAAMO,UAK5DP,EAAMS,aAAe,uBAAGX,UAAU,gBAAb,eACjB,0BAAMA,UAAU,kBAAhB,KAAoCE,EAAMS,cAK9CT,EAAMU,KAAOV,EAAMW,KAAO,uBAAGb,UAAU,gBAAb,YACb,0BAAMA,UAAU,mBAAhB,IAAoCE,EAAMU,KAD7B,kBAEb,0BAAMZ,UAAU,mBAAhB,IAAoCE,EAAMW,MAKvDX,EAAMY,UAAY,uBAAGd,UAAU,gBAAb,YACd,0BAAMA,UAAU,kBAAhB,KAAoCE,EAAMY,WAK9CZ,EAAMa,aAAe,uBAAGf,UAAU,gBAAb,cACb,0BAAMA,UAAU,kBAAhB,KAAoCE,EAAMa,cAKlDb,EAAMc,OAAS,uBAAGhB,UAAU,kBAAkBE,EAAMc,SC9B9DC,EAAS,mCA0EAC,E,2MArEbC,MAAQ,CACNR,iBAAaS,EACbR,SAAKQ,EACLP,SAAKO,EACLV,UAAMU,EACNX,aAASW,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,WAAOI,G,EASTC,W,uCAAa,WAAOC,GAAP,qBAAAC,EAAA,6DACXD,EAAEE,iBAEId,EAAOY,EAAEG,OAAOC,SAAShB,KAAKiB,MAC9BlB,EAAUa,EAAEG,OAAOC,SAASjB,QAAQkB,MAJ/B,SAOYC,MAAM,oDAAD,OAAqDlB,EAArD,YAA6DD,EAA7D,kBAA8EQ,IAP/F,cAOLY,EAPK,gBAQYA,EAASC,OARrB,OAQLC,EARK,OAUXC,QAAQC,IAAIF,GAGPrB,GAAQD,EACX,EAAKyB,SAAS,CACZvB,YAAa,EAAKwB,YAAYJ,EAASK,KAAKC,MAC5CzB,IAAK,EAAKuB,YAAYJ,EAASK,KAAKE,UACpCzB,IAAK,EAAKsB,YAAYJ,EAASK,KAAKG,UACpC7B,KAAMqB,EAASzB,KACfG,QAASsB,EAASS,IAAI/B,QACtBK,SAAUiB,EAASK,KAAKtB,SACxBC,YAAagB,EAASU,QAAQ,GAAG1B,YACjCC,MAAO,KAGT,EAAKkB,SAAS,CACZlB,MAAO,qCA1BA,4C,iIALDqB,GACV,OAAQK,KAAKC,MAAMN,EAAO,U,+BAqC1B,OACE,yBAAKrC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMI,YAAawC,KAAKvB,aACxB,kBAAC,EAAD,CACEV,YAAaiC,KAAKzB,MAAMR,YACxBC,IAAKgC,KAAKzB,MAAMP,IAChBC,IAAK+B,KAAKzB,MAAMN,IAChBH,KAAMkC,KAAKzB,MAAMT,KACjBD,QAASmC,KAAKzB,MAAMV,QACpBK,SAAU8B,KAAKzB,MAAML,SACrBC,YAAa6B,KAAKzB,MAAMJ,YACxBC,MAAO4B,KAAKzB,MAAMH,a,GAhEV6B,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0ebb85ff.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n//Titles function displays information about the website\r\nconst Titles = () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"title-container__title\">Weather APP </h1>\r\n            <p className=\"title-container__subtitle\"> Get your city's weather conditions...  </p>\r\n        </div>\r\n    )\r\n}\r\n\r\n//exported for use on other components\r\nexport default Titles;","import React from 'react';\r\n\r\nconst Form = (props) => {\r\n    return (\r\n        <form onSubmit={props.loadWeather}>\r\n            <input type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n            <input type=\"text\" name=\"country\" placeholder=\"Country...\" />\r\n            <button>Get Weather</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\n//weather function displays various weather information\r\nconst Weather = (props) => {\r\n    return (\r\n        //props are used from App.js and displayed using paragraph and span tags\r\n        <div className='weather-info'>\r\n            {\r\n                props.country && props.city && <p className=\"weather__key\">Location:\r\n                    <span className=\"weather__value\">  {props.city}, {props.country}</span>\r\n                </p>\r\n            }\r\n\r\n            {\r\n                props.temperature && <p className=\"weather__key\">Temperature:\r\n                    <span className=\"weather__value\">  {props.temperature}</span>\r\n                </p>\r\n            }\r\n\r\n            {\r\n                props.max && props.min && <p className=\"weather__key\">\r\n                    Maximum: <span className=\"weather__values\"> {props.max}</span> &nbsp;\r\n                    Minimum: <span className=\"weather__values\"> {props.min}</span>\r\n                </p>\r\n            }\r\n\r\n            {\r\n                props.humidity && <p className=\"weather__key\">Humidity:\r\n                    <span className=\"weather__value\">  {props.humidity}</span>\r\n                </p>\r\n            }\r\n\r\n            {\r\n                props.description && <p className=\"weather__key\">Conditions:\r\n                        <span className=\"weather__value\">  {props.description}</span>\r\n                </p>\r\n            }\r\n\r\n            {\r\n                props.error && <p className=\"weather__error\">{props.error}</p>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n//exported for use on other components\r\nexport default Weather;","import React, { Component } from 'react';\nimport './App.css'; //import css file for styling\nimport 'bootstrap/dist/css/bootstrap.min.css' //import bootstrap for styling\n//Import App components\nimport Titles from './Components/Titles'; \nimport Form from './Components/Form';\nimport Weather from './Components/Weather';\n\n//API Key identifier\nconst apiKey = '620d10dceb53efbd814c8e9c787c9ffa';\n\n//Main app component\nclass App extends Component {\n  // initialize dynamic variables using state\n  state = {\n    temperature: undefined,\n    max: undefined,\n    min: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  //methods converts temp value from kelvins to celcius\n  calcCelcius(temp) {\n    return (Math.floor(temp - 273.15));\n  }\n\n  //method fetches weather API and changes the value of variables initialized in state\n  getWeather = async (e) => {\n    e.preventDefault(); //prevents page from refreshing\n\n    const city = e.target.elements.city.value; //city name is assigned to variable city and used in api url when search is conducted\n    const country = e.target.elements.country.value; //country name is assigned to variable country and used in api url when search is conducted\n\n    //API data is fetched and converted into a json file for easy reading\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${apiKey}`);\n    const response = await api_call.json();\n\n    console.log(response);\n\n    //values of state variables changed on condition that city and country are entered\n     if (city && country) {\n      this.setState({\n        temperature: this.calcCelcius(response.main.temp),\n        max: this.calcCelcius(response.main.temp_max),\n        min: this.calcCelcius(response.main.temp_min),\n        city: response.name,\n        country: response.sys.country,\n        humidity: response.main.humidity,\n        description: response.weather[0].description,\n        error: \"\"\n      })\n    } else {  //when user does not enter input value(s)\n      this.setState({\n        error: \"Please enter city and country...\"\n      })\n    }\n    \n  }\n\n  render() { //render app components with various props passed\n    return (\n      <div className='App'>\n        <Titles />\n        <Form loadWeather={this.getWeather} />\n        <Weather\n          temperature={this.state.temperature}\n          max={this.state.max}\n          min={this.state.min}\n          city={this.state.city}\n          country={this.state.country}\n          humidity={this.state.humidity}\n          description={this.state.description}\n          error={this.state.error} />\n      </div>\n    )\n  }\n}\n\n//exported for use on other components\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}